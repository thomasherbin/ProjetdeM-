import java.awt.event.KeyEvent;
import java.util.ArrayList;

import edu.princeton.cs.introcs.StdDraw;

public class Game {
	private ArrayList<Player> Players;
	private int nbPlayers;
	private Stage currentStage;
	private static Cave[] Caves;

	public Game(boolean IAplayer, int nbCave, int nbStage) {
		this.nbPlayers = 2;
		System.out.println("Il y a " + nbPlayers + " joueurs dans le jeu.");
		Caves = new Cave[++nbCave];
		Players = new ArrayList<>();
		if (IAplayer) {
			Players.add(new Human(0));
			Players.add(new Human(1));
		} else {
			Players.add(new Human(0));
			Players.add(new Computer(1));
		}
		for (int i = 0; i < nbCave; i++) {
			Caves[i] = new Cave(i);
			// Caves[i].printCave();
		}
		game(nbStage);

	}

	public void game(int nbStage) {
		currentStage = new Stage();
		int stageNumber = 0;
		currentStage.setStageNumber(stageNumber);
		System.out.println(" ");
		System.out.println("PHASE " + currentStage.getStageNumber());
		while (currentStage.getStageNumber() < nbStage) {
			Stage(stageNumber);
			currentStage.setStageNumber(++stageNumber);
			if (currentStage.getStageNumber() == 3) {
			} else {
				System.out.println("PHASE " + currentStage.getStageNumber());
			}
		}
		for (int i = 0; i < Players.size(); i++) {
			getPlayer(i).playerScore();
		}
		System.out.println("La partie est fini !");
		System.out.println("C'est le joueur " + findWinner() + " qui a gagné !");
		reLaunchGame();
		// gamePrint();

	}

	public void Stage(int stageNumber) {
		deleteLevel();
		currentStage.setOxygen(getGameNbLevel() * nbPlayers);
		for (int i = 0; i < Players.size(); i++) {
			getPlayer(i).initPlayer(this);
		}
		gamePrint();
		int round = 0;
		int[] getRandomOrder = getRandomOrder(nbPlayers);
		while (currentStage.getOxygen() > 0) {
			getRandomOrder = twoPlayerInSameLevel(getRandomOrder);
			Round(round, getRandomOrder);
			round++;
		}
		System.out.println("L'oxygène est épuisé");
		System.out.println(" ");
		System.out.println(" ");
		
		
	}

	public void Round(int round, int[] getRandomOrder) {
		System.out.println(" ");
		System.out.println("TOUR " + round);
		System.out.println("Niveau d'oxygene : " + currentStage.getOxygen());
		currentStage.setOxygen(Round(getRandomOrder, currentStage.getOxygen()));

	}

	public int findWinner() {
		int playerBufferNumber = 100;
		int playerBufferTreasure = -1;
		for (int i = 0; i < Players.size(); i++) {
			if (getPlayer(i).getTreasureCount() > playerBufferTreasure) {
				playerBufferNumber = getPlayer(i).getPlayerNumber();
				playerBufferTreasure = getPlayer(i).getTreasureCount();
			}
		}
		return playerBufferNumber;
	}

	public void reLaunchGame() {
		System.out.println("Voulez vous recommencez une partie ?");
		System.out.println("flèche droite : oui  || flèche gauche : non");
		boolean action = false;
		while (action == false) {
			if (StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
				launchGame();
				while (StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
				}
				action = true;
			} else if (StdDraw.isKeyPressed(KeyEvent.VK_LEFT)) {
				while (StdDraw.isKeyPressed(KeyEvent.VK_LEFT)) {
				}
				action = true;
			}
		}

	}

	public static void launchGame() {
		int nbCave = 3;
		int nbStage = 3;
		System.out.println("Humain ou ordi ?");
		System.out.println("flèche gauche : Humain  || flèche droite : ordi");
		boolean action = false;
		while (action == false) {
			if (StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
				new Game(false, nbCave, nbStage);
				while (StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
				}
				action = true;
			} else if (StdDraw.isKeyPressed(KeyEvent.VK_LEFT)) {
				new Game(true, nbCave, nbStage);
				while (StdDraw.isKeyPressed(KeyEvent.VK_LEFT)) {
				}
				action = true;
			}
		}
	}

	public ArrayList<Player> getPlayers() {
		return Players;
	}

	public Player getPlayer(int playerNumber) {
		return Players.get(playerNumber);
	}

	public int getNbPlayers() {
		return nbPlayers;
	}

	public int getNbCave() {
		return Caves.length - 1;
	}

	public Cave[] getCaves() {
		return Caves;
	}

	public static Cave getCave(int i) {
		return Caves[i];
	}

	public static int getCaveNbLevel(int i) {
		return getCave(i).getLevel();
	}

	public int getGameNbLevel() {
		int GameNbLevel = 0;
		for (int i = 0; i < getNbCave() + 1; i++) {
			GameNbLevel = GameNbLevel + getCaveNbLevel(i);
		}
		return GameNbLevel;
	}

	public static Level getCaveLevel(int i, int k) {
		return getCave(i).getLevels().get(k);
	}

	public ArrayList<Chest> getChestCaveLevel(int i, int k) {
		return getCaveLevel(i, k).getChests();
	}

	public boolean chestTestPosition(int caveNumber, int levelNumber) {
		if (this.getCaveLevel(caveNumber, levelNumber).chestsTestLevel()) {
			return true;
		} else {
			return false;
		}
	}

	public int[] getRandomOrder(int nbPlayer) {
		ArrayList<Integer> IntergerList = new ArrayList<>();
		int[] randomOrder = new int[nbPlayer];
		for (int i = 0; i < nbPlayer; i++) {
			IntergerList.add(i);
		}
		for (int i = 0; i < nbPlayer; i++) {
			int randomNumber = IntergerList.remove((int) (Math.random() * IntergerList.size()));
			randomOrder[i] = randomNumber;
		}
		return randomOrder;
	}

	public boolean playerSameLevel(int playerNumber1, int PlayerNumber2) {
		if (Players.get(playerNumber1).getPlayerNumberCave() == Players.get(PlayerNumber2).getPlayerNumberCave()
				&& Players.get(playerNumber1).getPlayerNumberLevel() == Players.get(PlayerNumber2)
						.getPlayerNumberLevel()) {
			return true;
		} else {
			return false;
		}

	}

	public int[] twoPlayerInSameLevel(int[] getRandomOrder) {
		if (playerSameLevel(0, 1)) {
			getRandomOrder = getRandomOrder(nbPlayers);
			return getRandomOrder;
		} else {
			return getRandomOrder;
		}

	}

	public int Round(int[] getRandomOrder, int currentOxygen) {
		for (int i = 0; i < getRandomOrder.length; i++) {
			if (currentOxygen < 0) {
				return 0;
			} else {
				currentOxygen = RoundPlayer(getPlayer(getRandomOrder[i]), currentOxygen);
			}
		}
		return currentOxygen;
	}

	public int RoundPlayer(Player player, int currentOxygen) {
		int playerNumberPrint = player.getPlayerNumber() + 1;
		System.out.println("C'est au joueur " + playerNumberPrint + " de jouer !");
		player.playerPrint();
		int playerCaveb = player.getPlayerNumberCave();
		int playerLevelb = player.getPlayerNumberLevel();
		player.getNextMove(this);
		int playerCavea = player.getPlayerNumberCave();
		int playerLevela = player.getPlayerNumberLevel();
		if (playerCaveb == playerCavea && playerLevelb == playerLevela) {
			System.out.println("Vous êtes rester au même niveau, vous perdez donc " + 1 + " d'oxygene.");
			currentOxygen = currentOxygen - 1;
		} else {
			int lostOxygen = 1 + player.getChestsSize();
			System.out.println(
					"Vous avez " + player.getChestsSize() + " coffres, vous perdez donc " + lostOxygen + " d'oxygene.");
			currentOxygen = currentOxygen - lostOxygen;
		}
		player.playerPrint();
		return currentOxygen;

	}

	public void deleteLevel() {
		for (int i = 1; i < getNbCave() + 1; i++) {
			int size = getCaveNbLevel(i);
			int k = 0;
			while (k < size) {
				if (getChestCaveLevel(i, k).isEmpty()) {
					getCave(i).getLevels().remove(k);
					size--;
				} else {
					k++;
				}
			}
			getCave(i).setLevel(size);

		}
	}

	public void gamePrint() {
		for (int i = 0; i < Players.size(); i++) {
			Players.get(i).playerPrint();
		}
		for (int i = 0; i < Caves.length; i++) {
			Caves[i].printCave();
		}
		System.out.println("Il y a " + getChestCaveLevel(getNbCave(), getCaveNbLevel(getNbCave()) - 1).size()
				+ " coffres dans le dernier niveau.");
		System.out.println("");
		System.out.println("");
		System.out.println("");
	}

}
