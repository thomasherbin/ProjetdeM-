import java.util.ArrayList;

public class Game {
	private ArrayList<Player> Players;
	private int nbPlayers;
	private Stage CurrentStage;
	private static Cave[] Caves;

	public Game(int nbPlayers, int nbCave) {
		this.nbPlayers = nbPlayers;
		System.out.println("Il y a " + nbPlayers + " joueurs dans le jeu.");
		Caves = new Cave[++nbCave];
		Players = new ArrayList<>();
		for (int i = 0; i < nbPlayers; i++) {
			Players.add(new Player(i));
			// Players.get(i).playerPrint();
		}
		for (int i = 0; i < nbCave; i++) {
			Caves[i] = new Cave(i);
			// Caves[i].printCave();
		}
	}

	public ArrayList<Player> getPlayers() {
		return Players;
	}

	public Player getPlayer(int playerNumber) {
		return Players.get(playerNumber);
	}

	public int getNbPlayers() {
		return nbPlayers;
	}

	public int getNbCave() {
		return Caves.length;
	}

	public Stage getCurrentStage() {
		return CurrentStage;
	}

	public Cave[] getCaves() {
		return Caves;
	}

	public static Cave getCave(int i) {
		return Caves[i];
	}

	public static int getCaveNbLevel(int i) {
		return getCave(i).getLevel();
	}

	public static Level getCaveLevel(int i, int k) {
		return getCave(i).getLevels().get(k);
	}

	public static void lauchGame() {
		int nbPlayers = 2;
		int nbCave = 3;
		Game game = new Game(nbPlayers, nbCave);
		game.gamePrint();
		int playerBegin = (int) (Math.random() * nbPlayers);
		// int playerBegin = 1;
		int playerBeginPrint = playerBegin + 1;
		System.out.println("C'est au joueur " + playerBeginPrint + " de commencer !");
		game.getPlayer(playerBegin).playerPrint();
		game.getPlayer(playerBegin).getNextMove(game);
		game.getPlayer(playerBegin).playerPrint();
	}

	public boolean chestTestPosition(int caveNumber, int levelNumber) {
		if (this.getCaveLevel(caveNumber, levelNumber).chestTestLevel()) {
			return true;
		} else {
			return false;
		}
	}

	public void gamePrint() {
		for (int i = 0; i < Players.size(); i++) {
			Players.get(i).playerPrint();
		}
		for (int i = 0; i < Caves.length; i++) {
			Caves[i].printCave();
		}
	}

}
